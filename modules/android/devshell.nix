{ config, lib, ... }:
let
  cfg = config.devmods.android;
  cfgSettings = cfg.settings;

  sdkArgs = {
    # TODO add getScalar or getList from above w/ default value
    cmdLineToolsVersion = cfgSettings.cmdLineTools.version;
    platformVersions = cfgSettings.platform.versions;
    platformToolsVersion = cfgSettings.platformTools.version;
    buildToolsVersions = cfgSettings.buildTools.versions;
    includeEmulator = cfgSettings.emulator.enable;
    emulatorVersion = cfgSettings.emulator.version;
    includeSystemImages = cfgSettings.systemImages.enable;
    systemImageTypes = cfgSettings.systemImageTypes;
    abiVersions = cfgSettings.abis;
    cmakeVersions = cfgSettings.cmake.versions;
    includeNDK = cfgSettings.ndk.enable;
    ndkVersions = cfgSettings.ndk.versions;
    useGoogleAPIs = cfgSettings.googleAPIs.enable;
    includeSources = cfgSettings.sources.enable;
    includeExtras = cfgSettings.extras;
    extraLicenses = cfgSettings.extraLicenses;
  };
in
{
  config = lib.mkIf cfg.enable {
    devShell =
      pkgs:
      let
        androidComposition = pkgs.androidenv.composeAndroidPackages sdkArgs;
        androidSdk = androidComposition.androidsdk;
        ANDROID_HOME = "${androidSdk}/libexec/android-sdk";
        # NOTE: not sure why `avdmanager` is warningabout `ndk` and `nkd-bundle` both existing.
        ANDROID_NDK_ROOT = "${ANDROID_HOME}/ndk/";
        os = builtins.elemAt (builtins.split "-" pkgs.stdenv.system) 2;
      in
      {
        packages = [
          androidSdk # reference our own sdk settings
        ];

        # Environment variables
        env = with pkgs; {
          ANDROID_HOME = ANDROID_HOME;
          ANDROID_SDK_ROOT = ANDROID_HOME;
          ANDROID_NDK_ROOT = ANDROID_NDK_ROOT;

          # TODO need change "head" to use something like maxVersion to pick the appropriate version from a list:
          # maxVersion = builtins.foldl' (acc: v:
          # if lib.compareVersions v acc == 1 then v else acc
          # ) (builtins.head versions) (builtins.tail versions);
          GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${androidSdk}/libexec/android-sdk/build-tools/${lib.head cfgSettings.buildTools.versions}/aapt2";
          # emulator related: vulkan-loader and libGL shared libs are necessary for hardware decoding
          LD_LIBRARY_PATH = "${
            lib.makeLibraryPath [
              vulkan-loader
              libGL
            ]
          }:${ANDROID_HOME}/build-tools/${lib.head cfgSettings.buildTools.versions}/lib64/
           :${ANDROID_NDK_ROOT}/${lib.head cfgSettings.ndk.versions}/toolchains/llvm/prebuilt/${os}-x86_64/lib/
          :$LD_LIBRARY_PATH";
          # For now, it seems only x86_64 is available for prebuilt llvm libraries
          # TODO: fix bug where ndk.versions is an empty list
        };

        shellHook =
          let
            androidDir = if config.devmods.flutter.enable then "./android/" else ".";
          in
          ''
            set -e

            # tools is deprecated? I think it's replaced by command-line-tools? Add it here anyway
            export PATH="$PATH:$ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools"

            # Create a local properites file for Android Studio to read.
            # Haven't tested Android Studio with this, so not sure it works.

            # TODO move this into android directory
            # TODO add lgoic so we only do this if flutter is not enabled
            #   cat <<EOF > local.properties
            #   # This file was automatically generated by nix-shell.
            #   sdk.dir=$ANDROID_HOME
            #   ndk.dir=$ANDROID_NDK_ROOT
            #   EOF

            export ANDROID_USER_HOME=$(pwd)/.android
            export ANDROID_AVD_HOME=$(pwd)/.android/avd

            test -e "$ANDROID_USER_HOME" || mkdir -p "$ANDROID_USER_HOME"
            test -e "$ANDROID_AVD_HOME" || mkdir -p "$ANDROID_AVD_HOME"

            # Sync build files
            ${pkgs.sync-android-build-files}/bin/sync-android-build-files "${androidDir}" "${cfgSettings.platform.compileSdkVersion}" "${cfgSettings.androidGradlePlugin.version}" "${pkgs.devmods.gradle-wrapper}"
            set +e
          '';

      };
  };
}
