{ androidCfg, ... }:
{
  flutter-init =
    pkgs:
    pkgs.writeShellApplication {
      name = "flutter-init";
      runtimeInputs = with pkgs; [
        flutter
      ];
      text = ''
        #!/usr/bin/env bash
        # 1) Create flutter initial project files
        flutter create .
        # 2) Update versions in files
        ${pkgs.update-android-file-versions}/bin/update-android-file-versions "./android" "${androidCfg.compileSdk.version}" "${androidCfg.androidGradlePlugin.version}"

         
        # 3) add local.properties to ./anddroid/ folder
        # TODO consder referencing the nix packages instead of shell env vars
        # cat <<EOF > ./android/local.properties
        # This file was automatically generated by nix-shell.
        # sdk.dir=$ANDROID_HOME
        # ndk.dir=$ANDROID_NDK_ROOT
        # flutter.sdk=$FLUTTER_ROOT
        # EOF
        # TODO figure out how to set gradle version from nix?
        # - Simple first step could be to replace the `gradlew` aand `gradle.bat` with a genearted shell s
        #   script.  Might need to patch
        # - Another approach is to patch flutter codebase to write the desired gradle version.
        #   - See: wrapperGradleFileContent in generate_gradle_lockfiles.dart
        #   - TODO also find wheree to write AGP version
        #     - It seems like there's logic to already check compatibility between gradle versions
        #       and AGP however.  Can we rreuse this logic instead of creating our own in nix?
        #       Maybe its a moot point since we want to addd this logic from nix side anyway?
        # 4) change gradle version in android/gradle/wrapper/gradle-wrapper.properties
        # - Backup existing gradlew file
        # gradle_file="./android/app/build.gradle"
        # cp "$gradle_file" "$gradle_file.bak"
        # - link to own gradle script
      '';
    };
}
